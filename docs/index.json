[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "esm/.external-ecmascript.js",
    "static": true,
    "longname": "esm/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "esm/index.js",
    "content": "/** \n * Tests if a function holds true for all elements in an iterable. \n * Always returns true for an empty iterable. \n * This function is curried. \n * @param {Function} f The condition to test for each element.\n * @param {Object} xs The iterable.\n * @returns {boolean}\n */\nconst all = (f = x => true) => {\n  if (!f) {\n    throw new TypeError('f must be a function');\n  }\n\n  return xs => {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (!f(x)) {\n          return false;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return true;\n  };\n};\n\n/** \n * Tests if a given object is an iterable \n * @param {Object} xs The object to test.\n * @returns {Boolean}\n */\nconst isIterable = xs => !!xs && !!xs[Symbol.iterator];\n\n/** \n * Given a generator function, returns an iterable with equivalent elements. \n * @param {Object} xs The generator function.\n * @returns {Object}\n */\nconst fromGenerator = f => {\n  if (!f) {\n    throw new TypeError('f must be a generator function');\n  }\n\n  return {\n    [Symbol.iterator]: function* () {\n      yield* f();\n    }\n  };\n};\n\n/**\n * Combines two iterables into one by pairing each element in the first with each element in the second.\n * Each pair is a two element array.\n * This function creates very long sequences for long inputs.\n * This function is curried.\n * @param {Object} xs The iterable whose elements will be the second element of the pairs.\n * @param {Object} ys The iterable whose elements will be the first element of the pairs.\n * @returns {Object}\n */\n\nconst allPairs = xs => {\n  if (!isIterable(xs)) {\n    throw new TypeError('xs must be iterable');\n  }\n\n  return ys => {\n    if (!isIterable(ys)) {\n      throw new TypeError('ys must be iterable');\n    }\n\n    return fromGenerator(function* () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = ys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const y = _step.value;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = xs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              const x = _step2.value;\n              yield [y, x];\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n  };\n};\n\n/** \n * Tests if a function holds true for any of the elements in an iterable. \n * Always returns false for an empty iterable. \n * This function is curried. \n * @param {Function} f The condition to test for each element.\n * @param {Object} xs The iterable.\n * @returns {boolean}\n */\nconst any = (f = x => true) => {\n  if (!f) {\n    throw new TypeError('f must be a function');\n  }\n\n  return xs => {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (f(x)) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return false;\n  };\n};\n\n/** \n * Appends an object to the end of an iterable sequence. \n * This function is curried. \n * @param {Object} x The object to append.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst append = x => xs => ({\n  [Symbol.iterator]: function* () {\n    yield* xs;\n    yield x;\n  }\n});\n\n/** \n * Takes an iterable and returns a new iterable with all of the same elements but with a memory buffer. \n * This can be used to prevent repeated computations. \n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst buffer = xs => {\n  if (!xs[Symbol.iterator]) {\n    throw new TypeError('xs must be iterable');\n  }\n\n  const b = [];\n  const g = xs[Symbol.iterator]();\n\n  const addToBuffer = () => {\n    const next = g.next();\n\n    if (next.done) {\n      return false;\n    }\n\n    b.push(next.value);\n    return true;\n  };\n\n  return {\n    [Symbol.iterator]: function* () {\n      let i = 0;\n\n      while (true) {\n        while (i >= b.length) {\n          const moreToAdd = addToBuffer();\n\n          if (!moreToAdd) {\n            return;\n          }\n        }\n\n        yield b[i];\n        i++;\n      }\n    }\n  };\n};\n\n/** \n * Splits an iterable into chunks of a given size. \n * The last chunk may be less than the specified size. \n * This function is curried. \n * @param {Number} n The chunk size.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst chunk = n => {\n  if (typeof n !== 'number') {\n    throw new TypeError('n must be a number');\n  }\n\n  if (n <= 0) {\n    throw new RangeError('n must be greater than zero');\n  }\n\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      let ys = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const x = _step.value;\n          ys.push(x);\n\n          if (ys.length == n) {\n            yield ys;\n            ys = [];\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (ys.length > 0) {\n        yield ys;\n      }\n    }\n  });\n};\n\n/** \n * Concatenates two iterables into one.  \n * This function is curried. \n * @param {Object} ys The iterable to yield second.\n * @param {Object} xs The iterable to yield first.\n * @returns {Object}\n */\nconst concat = ys => xs => ({\n  [Symbol.iterator]: function* () {\n    yield* xs;\n    yield* ys;\n  }\n});\n\n/** \n * Counts the number of elements in an iterable. \n * @param {Object} xs The iterable.\n * @returns {number}\n */\nconst count = xs => {\n  let i = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const _ = _step.value;\n      i++;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return i;\n};\n\nconst defaultComparison = (i, j) => {\n  if (i == j) {\n    return 0;\n  }\n\n  if (i > j) {\n    return 1;\n  }\n\n  return -1;\n};\n\nconst defaultEquality = {\n  hashCode: _ => 0,\n  isEqual: (x, y) => x == y\n};\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\n/** \n * Creates an iterable of numbers from zero to the given limit. \n * @param {Number=} n The number to count to.\n * @returns {Object}\n */\nconst range = (n = Infinity) => {\n  if (typeof n !== 'number') {\n    throw new TypeError('n must be a number');\n  }\n\n  if (n < 0) {\n    throw new RangeError('n must be at least zero');\n  }\n\n  return {\n    [Symbol.iterator]: function* () {\n      for (let i = 0; i < n; i++) {\n        yield i;\n      }\n    }\n  };\n};\n\n/** \n * Combines two iterables into one by pairing elements. \n * Each pair is a two element array. \n * The longer of the two iterables will be truncated to match the length of the shorter one.  \n * This function is curried. \n * @param {Object} ys The iterable whose elements will be the second element of the pairs.\n * @param {Object} xs The iterable whose elements will be the first element of the pairs.\n * @returns {Object}\n */\nconst zip = ys => {\n  if (!ys[Symbol.iterator]) {\n    throw new TypeError('ys must be iterable');\n  }\n\n  return xs => {\n    if (!xs[Symbol.iterator]) {\n      throw new TypeError('xs must be iterable');\n    }\n\n    return {\n      [Symbol.iterator]: function* () {\n        const xsGenerator = xs[Symbol.iterator]();\n        const ysGenerator = ys[Symbol.iterator]();\n\n        while (true) {\n          const x = xsGenerator.next();\n          const y = ysGenerator.next();\n\n          if (x.done || y.done) {\n            break;\n          }\n\n          yield [x.value, y.value];\n        }\n      }\n    };\n  };\n};\n\nconst indexed = xs => zip(xs)(range());\n\nconst dict = (equality = defaultEquality) => {\n  const hashCode = equality.hashCode,\n        isEqual = equality.isEqual;\n  const store = new Map();\n\n  const get = x => {\n    const buckets = store.get(hashCode(x)) || [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = buckets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const _step$value = _slicedToArray(_step.value, 2),\n              key = _step$value[0],\n              value = _step$value[1];\n\n        if (isEqual(key, x)) {\n          return value;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return undefined;\n  };\n\n  const set = (key, value) => {\n    const bucketGroup = hashCode(key);\n    let bucket = store.get(bucketGroup);\n\n    if (!bucket) {\n      bucket = [];\n      store.set(bucketGroup, bucket);\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = (_bucket = bucket, indexed(_bucket))[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var _bucket;\n\n        const _step2$value = _slicedToArray(_step2.value, 2),\n              i = _step2$value[0],\n              _step2$value$ = _slicedToArray(_step2$value[1], 2),\n              x = _step2$value$[0],\n              value = _step2$value$[1];\n\n        if (isEqual(key, x)) {\n          bucket[i] = [x, value];\n          return;\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    bucket.push([key, value]);\n  };\n\n  return {\n    get,\n    set\n  };\n};\n\n/**\n * Takes an iterable and returns a new one with adjacent duplicate elements removed.\n * The order of the iterable is maintained.\n * This function is curried.\n * @param {Object=} e The equality system to use.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\n\nconst distinctUntilChanged = (e = defaultEquality) => xs => {\n  const hashCode = e.hashCode,\n        isEqual = e.isEqual;\n  return fromGenerator(function* () {\n    let previous = null;\n    let previousHashCode = null;\n    let isFirst = true;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (isFirst) {\n          yield x;\n          isFirst = false;\n          previous = x;\n          previousHashCode = hashCode(previous);\n        } else {\n          if (hashCode(x) !== previousHashCode || !isEqual(x, previous)) {\n            yield x;\n            previous = x;\n            previousHashCode = hashCode(previous);\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n};\n\nconst hashCode = x => {\n  const s = JSON.stringify(x);\n  let hash = 0;\n  let chr = null;\n\n  if (s.length === 0) {\n    return hash;\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    chr = s.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return hash;\n};\n\nconst stringifyEquality = {\n  hashCode,\n  isEqual: (x, y) => JSON.stringify(x) === JSON.stringify(y)\n};\n\nconst hashCodeString = s => {\n  let h = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    h = (h << 5) - h + s.charCodeAt(i) | 0;\n  }\n\n  return h;\n};\n\nconst hashCodeNumber = x => {\n  if (Number.isNaN(x)) {\n    return 0;\n  }\n\n  if (!Number.isFinite(x)) {\n    return 0;\n  }\n\n  return Math.trunc(x) % 2147483647; // A large prime number\n};\n\nconst hashCodeArray = (xs, visited) => {\n  let hash = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const x = _step.value;\n      hash = (hash << 5) - hash + hashCode$1(x, visited);\n      hash = hash & hash;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return hash;\n};\n\nconst hashCodeObject = (x, visited) => {\n  let hash = 0;\n  const entries = Object.entries(x);\n  entries.sort(([a], [b]) => a > b ? -1 : a == b ? 0 : 1);\n\n  for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {\n    const _entries$_i = _slicedToArray(_entries[_i], 2),\n          key = _entries$_i[0],\n          value = _entries$_i[1];\n\n    hash = (hash << 5) - hash + hashCodeString(key) * 7 + hashCode$1(value, visited);\n    hash = hash & hash;\n  }\n\n  return hash;\n};\n\nfunction hashCode$1(x, visited = new Set()) {\n  if (x === undefined) {\n    throw new ReferenceError('x must not be undefined');\n  }\n\n  if (x === null) {\n    return 0;\n  }\n\n  if (typeof x === 'number') {\n    return hashCodeNumber(x);\n  }\n\n  if (typeof x === 'string') {\n    return hashCodeString(x);\n  }\n\n  if (Array.isArray(x)) {\n    visited.add(x);\n    return hashCodeArray(x, visited);\n  }\n\n  if (typeof x === 'object') {\n    if (visited.has(x)) {\n      return 0;\n    }\n\n    visited.add(x);\n    return hashCodeObject(x, visited);\n  }\n\n  return 0;\n}\n\nconst isEqual = (x, y) => {\n  if (x === undefined) {\n    throw new ReferenceError('x must not be undefined');\n  }\n\n  if (y === undefined) {\n    throw new ReferenceError('y must not be undefined');\n  }\n\n  if (x === y) {\n    return true;\n  }\n\n  if (x === null) {\n    return y === null;\n  }\n\n  if (typeof x === 'number') {\n    return x === y;\n  }\n\n  if (typeof x === 'string') {\n    return x === y;\n  }\n\n  if (typeof x === 'object') {\n    if (typeof y !== 'object') {\n      return false;\n    }\n\n    if (Object.entries(x).length !== Object.entries(y).length) {\n      return false;\n    }\n\n    for (var _i = 0, _Object$entries = Object.entries(x); _i < _Object$entries.length; _i++) {\n      const _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n      if (y[key] === undefined) {\n        return false;\n      }\n\n      if (!isEqual(value, y[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst structuralEquality = {\n  hashCode: hashCode$1,\n  isEqual\n};\n\n/** \n * An empty iterable. \n */\nconst empty = {\n  [Symbol.iterator]: function* () {}\n};\n\n/** \n * Takes an iterable and returns a new one including only elements that satisfy a given predicate.  \n * The order of the iterable is maintained. \n * This function is curried. \n * @param {Object} f The predicate.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst filter = f => {\n  if (!f) {\n    throw new TypeError('f must be a function');\n  }\n\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const x = _step.value;\n\n          if (f(x)) {\n            yield x;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  });\n};\n\n/** \n * Returns the first element of an iterable that satisfies a given predicate.   \n * This function will throw an error if no satisfactory element is found.  \n * This function is curried. \n * @param {Object=} f The predicate, defaults to always true.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst first = (f = _ => true) => {\n  if (!f) {\n    throw new TypeError('f must be a function');\n  }\n\n  return xs => {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (f(x)) {\n          return x;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    throw new Error('Expected at least one element');\n  };\n};\n\n/** \n * Takes an iterable and returns a new one where each element is transformed using the given function.  \n * Unlike map, the function is expected to return an iterable for each element. These iterables are concatenated. \n * The order of the iterable is maintained. \n * This function is curried. \n * @param {Object} f The transformation function that returns an iterable.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst flatMap = f => {\n  if (!f) {\n    throw new TypeError('f must be a function');\n  }\n\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const x = _step.value;\n          yield* f(x);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  });\n};\n\n/** \n * Given an iterable returns a new iterable that repeats it forever. \n * Take care, since the resulting iterable is infinite. \n * @param {Object} xs The iterable to repeat.\n * @returns {Object}\n */\nconst forever = xs => {\n  if (!xs) {\n    throw new TypeError('xs must be defined');\n  }\n\n  return {\n    [Symbol.iterator]: function* () {\n      while (true) {\n        yield* xs;\n      }\n    }\n  };\n};\n\n/** \n * Given an array, returns an iterable with equivalent elements. \n * You should not mutate the array used to create the iterable. \n * @param {Object} xs The array.\n * @returns {Object}\n */\nconst fromArray = xs => {\n  if (!Array.isArray(xs)) {\n    throw new TypeError('xs must be an array');\n  }\n\n  return {\n    [Symbol.iterator]: function* () {\n      yield* xs;\n    }\n  };\n};\n\n/**\n * Returns an iterable of iterables split by the grouping function.\n * If the iterable is empty then an error is thrown.\n * This function is partially curried.\n * @param {Object} f the grouping function.\n * @param {Object} [equality=defaultEquality] The equality system to use.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\n\nconst groupBy = (f, equality = defaultEquality) => xs => {\n  const hashCode = equality.hashCode,\n        isEqual = equality.isEqual;\n  return fromGenerator(function* () {\n    const d = dict(equality);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = buffer(xs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n        const key = f(x);\n        const group = d.get(key);\n\n        if (group === undefined) {\n          var _xs;\n\n          const keyHashCode = hashCode(key);\n          const group = (_xs = xs, filter(y => {\n            const z = f(y);\n            return hashCode(z) === keyHashCode && isEqual(key, z);\n          })(_xs));\n          yield [key, group];\n          d.set(key, group);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n};\n\n/** \n * Returns the first element of an iterable. \n * If the iterable is empty then an error is thrown. \n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst head = xs => {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const x = _step.value;\n      return x;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  throw new Error('Expected at least one element');\n};\n\n/** \n * Tests if a an iterable contains a given element. \n * Also takes an equality object as an optional argument. \n * This function is partially curried. \n * @param {Object} element The element to look for. \n * @param {Object} [equality=defaultEquality] The equality system to use. \n * @param {Object} xs The iterable to search. \n * @returns {boolean}\n */\n\nconst includes = (element, equality = defaultEquality) => {\n  const isEqual = equality.isEqual;\n\n  if (!isEqual) {\n    throw new TypeError('equality must have a isEqual property');\n  }\n\n  return xs => {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (isEqual(element, x)) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return false;\n  };\n};\n\n/**\n * Puts a given item between each element in a sequence.\n * @param {Object=} s The seperator item.\n * @param {Object} xs The iterable to intercalate.\n * @returns {Object}\n */\n\nconst intercalate = s => xs => {\n  if (!isIterable) {\n    throw new TypeError('xs must be an iterable');\n  }\n\n  return fromGenerator(function* () {\n    let isFirst = true;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (isFirst) {\n          isFirst = false;\n        } else {\n          yield s;\n        }\n\n        yield x;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n};\n\n/** \n * Takes an iterable and returns a new iterable where\n * the nth element has been set to a given value.  \n * This function is curried. \n * @param {Number} n The index of the element to replace. \n * @param {Object} value The new value. \n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst set = (n, value) => xs => ({\n  [Symbol.iterator]: function* () {\n    let i = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (i == n) {\n          yield value;\n        } else {\n          yield x;\n        }\n\n        i++;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n});\n\n/** \n * Sums all elements in an iterable. \n * If the iterable is empty then zero is returned. \n * @param {Object} xs The iterable.\n * @returns {Number}\n */\nconst sum = xs => {\n  if (!xs || !xs[Symbol.iterator]) {\n    throw new TypeError('xs must be iterable');\n  }\n\n  let result = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const x = _step.value;\n      result = result + x;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return result;\n};\n\n/** \n * Returns an iterable of all elements except the first. \n * If the iterable is empty then an error is thrown. \n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst tail = xs => ({\n  [Symbol.iterator]: function* () {\n    let isFirst = true;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (isFirst) {\n          isFirst = false;\n        } else {\n          yield x;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (isFirst) {\n      throw new Error('Expected at least one element');\n    }\n  }\n});\n\n/** \n * Takes the first n elements of an iterable. \n * If there are fewer than n elements in an iterable, then this has no effect. \n * This function is curried. \n * @param {Number} n The number of elements to take.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst take = n => {\n  if (!Number.isSafeInteger(n)) {\n    throw new TypeError('n must be an integer');\n  }\n\n  if (n < 0) {\n    throw new RangeError('n must be at least zero');\n  }\n\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      let i = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const x = _step.value;\n\n          if (i >= n) {\n            return;\n          }\n\n          yield x;\n          i++;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  });\n};\n\n/** \n * Takes elements from an iterable for as long as the elements satisfy a given condition. \n * The first element that does satisfies the condition will not be included. \n * This function is curried. \n * @param {Object} f The function.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst takeWhile = f => {\n  if (!f) {\n    throw new TypeError('f must be a function');\n  }\n\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const x = _step.value;\n\n          if (!f(x)) {\n            return;\n          }\n\n          yield x;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  });\n};\n\n/** \n * Joins all elements in an iterable using the given seperator. \n * If the iterable is empty then the empty string is returned. \n * @param {String=} s The seperator string. \n * @param {Object} xs The iterable to join. \n * @returns {String}\n */\nconst join = (s = '') => xs => {\n  if (!xs || !xs[Symbol.iterator]) {\n    throw new TypeError('xs must be iterable');\n  }\n\n  let result = '';\n  let isFirst = true;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const x = _step.value;\n\n      if (isFirst) {\n        result = x;\n        isFirst = false;\n      } else {\n        result = result + s + x;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return result;\n};\n\n/** \n * Constructs an iterable from a fixed list of elements. \n * This function is variadic. \n * @param {...Object} elements The elements of the iterable. \n * @returns {Object}\n */\nconst just = function just() {\n  const xs = [...arguments];\n  return {\n    [Symbol.iterator]: function* () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const x = _step.value;\n          yield x;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  };\n};\n\n/** \n * Returns the last element of an iterable that satisfies a given predicate.   \n * This function will throw an error if no satisfactory element is found.  \n * This function is curried. \n * @param {Object=} f The predicate, defaults to always true.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst last = (f = _ => true) => xs => {\n  let hasFoundValue = false;\n  let y = null;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const x = _step.value;\n\n      if (f(x)) {\n        hasFoundValue = true;\n        y = x;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (hasFoundValue) {\n    return y;\n  }\n\n  throw new Error('Expected at least one element');\n};\n\n/** \n * Takes an iterable and returns a new one where each element is transformed using the given function.  \n * The order of the iterable is maintained. \n * This function is curried. \n * @param {Object} f The transformation function.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst map = f => {\n  if (!f) {\n    throw new TypeError('f must be a function');\n  }\n\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const x = _step.value;\n          yield f(x);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  });\n};\n\n/** \n * Takes an iterable and returns the smallest element, according to the given comparison. \n * This function is curried. \n * @param {Object=} c The comparison.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\n\nconst min = (c = defaultComparison) => {\n  if (!c) {\n    throw new TypeError('c must be defined');\n  }\n\n  return xs => {\n    if (!xs) {\n      throw new TypeError('xs must be define');\n    }\n\n    let min = null;\n    let foundMin = false;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (foundMin) {\n          if (c(x, min) < 0) {\n            min = x;\n          }\n        } else {\n          foundMin = true;\n          min = x;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (foundMin) {\n      return min;\n    }\n\n    throw new Error('Expected at least one element but found none');\n  };\n};\n\n/** \n * Takes an iterable and returns the largest element, according to the given comparison. \n * This function is curried. \n * @param {Object=} c The comparison.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\n\nconst max = (c = defaultComparison) => {\n  if (!c) {\n    throw new TypeError('c must be defined');\n  }\n\n  return min((i, j) => c(j, i));\n};\n\n/** \n * Tests if a function holds true for none of the elements in an iterable. \n * Always returns true for an empty iterable. \n * By default, this function returns false for an iterable with any elements. \n * This function is curried. \n * @param {Function=} f The condition to test for each element.\n * @param {Object} xs The iterable.\n * @returns {boolean}\n */\nconst none = (f = _ => true) => {\n  if (!f) {\n    throw new TypeError('f must be a function');\n  }\n\n  return xs => {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (f(x)) {\n          return false;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return true;\n  };\n};\n\n/** \n * Returns the nth element of an iterable.    \n * This function will throw an error if the iterable is not long enough.  \n * This function is curried. \n * @param {Number} n The zero-based index of the element to return.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst nth = n => {\n  if (!Number.isSafeInteger(n)) {\n    throw new TypeError('n must be an integer');\n  }\n\n  if (n < 0) {\n    throw new RangeError('n must be at least zero');\n  }\n\n  return xs => {\n    let i = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (i === n) {\n          return x;\n        }\n\n        i++;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    throw new Error('Tried to take the ' + n + 'th element, but there were only ' + i);\n  };\n};\n\n/** \n * Takes an iterable and returns a new iterable that may only be iterated once. \n * This function is useful for debugging purposes. \n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst once = xs => {\n  if (!xs) {\n    throw new TypeError('xs must be defined');\n  }\n\n  let hasBeenCalled = false;\n  return {\n    [Symbol.iterator]: function* () {\n      if (hasBeenCalled) {\n        throw new Error('once(xs) may only be iterated once. ');\n      } else {\n        hasBeenCalled = true;\n      }\n\n      yield* xs;\n    }\n  };\n};\n\n/** \n * Prepends an object to the start of an iterable sequence. \n * This function is curried. \n * @param {Object} x The object to prepend.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst prepend = x => xs => ({\n  [Symbol.iterator]: function* () {\n    yield x;\n    yield* xs;\n  }\n});\n\n/** \n * Performs a reduction of an iterable, starting from a given state and reducer function. \n * Note that this function must not be called on an infinite iterable. \n * This function is partially curried. \n * @param {Object} s The initial state. \n * @param {Object} f The reducer function. \n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst reduce = (s, f) => xs => {\n  let w = s;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const x = _step.value;\n      w = f(w, x);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return w;\n};\n\n/** \n * Takes an iterable and returns a new iterable where\n * the nth element has been skipped.  \n * This function is curried. \n * @param {Number} n The index of the element to replace. \n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst remove = n => xs => ({\n  [Symbol.iterator]: function* () {\n    let i = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (i != n) {\n          yield x;\n        }\n\n        i++;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n});\n\n/** \n * Repeats an iterable for the given number of times. \n * This function is curried. \n * @param {Number} n The number of repetitions. \n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst repeat = n => {\n  if (Number.isNaN(n) || !Number.isSafeInteger(n)) {\n    throw new TypeError('n must be a number');\n  }\n\n  if (n < 0) {\n    throw new RangeError('n must be at least zero');\n  }\n\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      for (let i = 0; i < n; i++) {\n        yield* xs;\n      }\n    }\n  });\n};\n\n/** \n * Given an iterable, returns a new iterable with the elements reversed. \n * Note that this function must not be called on an infinite iterable. \n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst reverse = xs => ({\n  [Symbol.iterator]: function* () {\n    const ys = [...xs];\n    ys.reverse();\n    yield* ys;\n  }\n});\n\n/** \n * Returns the first element of an iterable that satisfies a given predicate.   \n * This function will throw an error if no satisfactory element is found.  \n * This function is curried. \n * @param {Object=} f The predicate, defaults to always true.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst single = (f = _ => true) => xs => {\n  let hasFoundValue = false;\n  let y = null;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const x = _step.value;\n\n      if (f(x)) {\n        if (hasFoundValue) {\n          throw new Error('Expected exactly one element but found at least two');\n        }\n\n        hasFoundValue = true;\n        y = x;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (hasFoundValue) {\n    return y;\n  }\n\n  throw new Error('Expected exactly one element but found none');\n};\n\n/** \n * Skips elements from an iterable for as long as the elements satisfy a given condition. \n * The first element that satisfies the condition will be included. \n * This function is curried. \n * @param {Object} f The function.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst skipUntil = f => {\n  if (!f) {\n    throw new TypeError('f must be a function');\n  }\n\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      let shouldYield = false;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const x = _step.value;\n\n          if (shouldYield) {\n            yield x;\n          } else {\n            if (f(x)) {\n              yield x;\n              shouldYield = true;\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  });\n};\n\n/** \n * Skips the first n elements of an iterable. \n * If there are fewer than n elements in an iterable, then an empty iterable will be returned. \n * This function is curried. \n * @param {Number} n The number of elements to skip.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst skip = n => {\n  if (!Number.isSafeInteger(n)) {\n    throw new TypeError('n must be an integer');\n  }\n\n  if (n < 0) {\n    throw new RangeError('n must be at least zero');\n  }\n\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      let i = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const x = _step.value;\n\n          if (i >= n) {\n            yield x;\n          }\n\n          i++;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  });\n};\n\nconst peek = xs => xs[xs.length - 1];\n/** \n * Deep flattens an iterable and all of its nested iterables. \n * Strings are not considered iterables for this function. \n * @param {Object} xs The iterable.\n * @returns {Object}\n */\n\n\nconst smoosh = xs => ({\n  [Symbol.iterator]: function* () {\n    const pending = [xs[Symbol.iterator]()];\n\n    while (pending.length > 0) {\n      let _peek$next = peek(pending).next(),\n          value = _peek$next.value,\n          done = _peek$next.done;\n\n      if (done) {\n        pending.pop();\n      } else {\n        if (typeof value !== 'string' && isIterable(value)) {\n          pending.push(value[Symbol.iterator]());\n        } else {\n          yield value;\n        }\n      }\n    }\n  }\n});\n\n/** \n * Takes an iterable and converts it into an array. \n * This should only be called on finite iterables. \n * @param {Object} xs The iterable.\n * @returns {Array}\n */\nconst toArray = xs => {\n  if (Array.isArray(xs)) {\n    return xs;\n  }\n\n  const result = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const x = _step.value;\n      result.push(x);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return result;\n};\n\n/** \n * Given an iterable, returns a new iterable with the elements sorted. \n * Note that this function must not be called on an infinite iterable. \n * @param {Object=} c The comparison function to use.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\n\nconst sorted = (c = defaultComparison) => {\n  if (!c) {\n    throw new TypeError('c must be defined');\n  }\n\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      const ys = [...xs];\n      ys.sort(c);\n      yield* ys;\n    }\n  });\n};\n\nconst sortedBy = (f, c = defaultComparison) => {\n  if (!f) {\n    throw new TypeError('f must be defined');\n  }\n\n  if (!c) {\n    throw new TypeError('c must be defined');\n  }\n\n  const comparison = (i, j) => c(i.score, j.score);\n\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      const ys = [...map(x => ({\n        score: f(x),\n        value: x\n      }))(xs)];\n      ys.sort(comparison);\n      yield* map(x => x.value)(ys);\n    }\n  });\n};\n\nconst sortedByDesc = (f, c = defaultComparison) => {\n  if (!f) {\n    throw new TypeError('f must be defined');\n  }\n\n  if (!c) {\n    throw new TypeError('c must be defined');\n  }\n\n  const reversedComparison = (i, j) => c(j.score, i.score);\n\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      const ys = [...map(x => ({\n        score: f(x),\n        value: x\n      }))(xs)];\n      ys.sort(reversedComparison);\n      yield* map(x => x.value)(ys);\n    }\n  });\n};\n\nconst strictEquality = {\n  hashCode: _ => 0,\n  isEqual: (x, y) => x === y\n};\n\n/** \n * Takes an iterable and returns a new one with duplicate elements removed.  \n * The order of the iterable is maintained. \n * This function is curried. \n * @param {Object=} e The equality system to use.\n * @param {Object} xs The iterable.\n * @returns {Object}\n */\n\nconst unique = (e = defaultEquality) => {\n  const hashCode = e.hashCode,\n        isEqual = e.isEqual;\n  return xs => ({\n    [Symbol.iterator]: function* () {\n      const buckets = new Map();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const x = _step.value;\n          const h = hashCode(x);\n          const bucket = buckets.get(h);\n\n          if (bucket) {\n            let foundExactMatch = false;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = bucket[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                const y = _step2.value;\n\n                if (isEqual(x, y)) {\n                  foundExactMatch = true;\n                  break;\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            if (!foundExactMatch) {\n              yield x;\n              bucket.push(x);\n            }\n          } else {\n            yield x;\n            buckets.set(h, [x]);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  });\n};\n\n/** \n * Takes an iterable and returns a new iterable where\n * the nth element has been updated with the given function.  \n * This function is curried. \n * @param {Number} n The index of the element to replace. \n * @param {Function} f The update function. \n * @param {Object} xs The iterable.\n * @returns {Object}\n */\nconst update = (n, f) => xs => ({\n  [Symbol.iterator]: function* () {\n    let i = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const x = _step.value;\n\n        if (i == n) {\n          yield f(x);\n        } else {\n          yield x;\n        }\n\n        i++;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n});\n\nexport { all, allPairs, any, append, buffer, chunk, concat, count, defaultComparison, defaultEquality, dict, distinctUntilChanged, empty, filter, first, flatMap, forever, fromArray, fromGenerator, groupBy, head, includes, indexed, intercalate, isIterable, join, just, last, map, max, min, none, nth, once, prepend, range, reduce, remove, repeat, reverse, set, single, skip, skipUntil, smoosh, sorted, sortedBy, sortedByDesc, strictEquality, stringifyEquality, structuralEquality, sum, tail, take, takeWhile, toArray, unique, update, zip };\n",
    "static": true,
    "longname": "/home/njlr/Documents/onwardlabs/seq/esm/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "_slicedToArray",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~_slicedToArray",
    "access": "private",
    "export": false,
    "importPath": "@njlr/seq",
    "importStyle": null,
    "description": null,
    "lineNumber": 365,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      },
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "_arrayWithHoles",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~_arrayWithHoles",
    "access": "private",
    "export": false,
    "importPath": "@njlr/seq",
    "importStyle": null,
    "description": null,
    "lineNumber": 369,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "_iterableToArrayLimit",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~_iterableToArrayLimit",
    "access": "private",
    "export": false,
    "importPath": "@njlr/seq",
    "importStyle": null,
    "description": null,
    "lineNumber": 373,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      },
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "_nonIterableRest",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~_nonIterableRest",
    "access": "private",
    "export": false,
    "importPath": "@njlr/seq",
    "importStyle": null,
    "description": null,
    "lineNumber": 403,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "hashCode",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~hashCode",
    "access": "public",
    "export": false,
    "importPath": "@njlr/seq",
    "importStyle": null,
    "description": null,
    "lineNumber": 616,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "hashCodeString",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~hashCodeString",
    "access": "public",
    "export": false,
    "importPath": "@njlr/seq",
    "importStyle": null,
    "description": null,
    "lineNumber": 639,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "hashCodeNumber",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~hashCodeNumber",
    "access": "public",
    "export": false,
    "importPath": "@njlr/seq",
    "importStyle": null,
    "description": null,
    "lineNumber": 649,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "hashCodeArray",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~hashCodeArray",
    "access": "public",
    "export": false,
    "importPath": "@njlr/seq",
    "importStyle": null,
    "description": null,
    "lineNumber": 661,
    "undocument": true,
    "params": [
      {
        "name": "xs",
        "types": [
          "*"
        ]
      },
      {
        "name": "visited",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "hashCodeObject",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~hashCodeObject",
    "access": "public",
    "export": false,
    "importPath": "@njlr/seq",
    "importStyle": null,
    "description": null,
    "lineNumber": 691,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "visited",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "hashCode$1",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~hashCode$1",
    "access": "public",
    "export": false,
    "importPath": "@njlr/seq",
    "importStyle": null,
    "description": null,
    "lineNumber": 708,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "visited",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "isEqual",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~isEqual",
    "access": "public",
    "export": false,
    "importPath": "@njlr/seq",
    "importStyle": null,
    "description": null,
    "lineNumber": 742,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "peek",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~peek",
    "access": "public",
    "export": false,
    "importPath": "@njlr/seq",
    "importStyle": null,
    "description": null,
    "lineNumber": 2048,
    "undocument": true,
    "params": [
      {
        "name": "xs",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "all",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~all",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{all}",
    "description": "Tests if a function holds true for all elements in an iterable. \nAlways returns true for an empty iterable. \nThis function is curried. ",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The condition to test for each element."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "allPairs",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~allPairs",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{allPairs}",
    "description": "Combines two iterables into one by pairing each element in the first with each element in the second.\nEach pair is a two element array.\nThis function creates very long sequences for long inputs.\nThis function is curried.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable whose elements will be the second element of the pairs."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ys",
        "description": "The iterable whose elements will be the first element of the pairs."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "any",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~any",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{any}",
    "description": "Tests if a function holds true for any of the elements in an iterable. \nAlways returns false for an empty iterable. \nThis function is curried. ",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The condition to test for each element."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "append",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~append",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{append}",
    "description": "Appends an object to the end of an iterable sequence. \nThis function is curried. ",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The object to append."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "buffer",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~buffer",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{buffer}",
    "description": "Takes an iterable and returns a new iterable with all of the same elements but with a memory buffer. \nThis can be used to prevent repeated computations. ",
    "lineNumber": 205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "chunk",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~chunk",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{chunk}",
    "description": "Splits an iterable into chunks of a given size. \nThe last chunk may be less than the specified size. \nThis function is curried. ",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The chunk size."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "concat",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~concat",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{concat}",
    "description": "Concatenates two iterables into one.  \nThis function is curried. ",
    "lineNumber": 307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ys",
        "description": "The iterable to yield second."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable to yield first."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "count",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~count",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{count}",
    "description": "Counts the number of elements in an iterable. ",
    "lineNumber": 319,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "defaultComparison",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~defaultComparison",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{defaultComparison}",
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "j",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "defaultEquality",
    "memberof": "esm/index.js",
    "static": true,
    "longname": "esm/index.js~defaultEquality",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{defaultEquality}",
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "type": {
      "types": [
        "{\"hashCode\": *, \"isEqual\": *}"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "dict",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~dict",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{dict}",
    "description": null,
    "lineNumber": 471,
    "undocument": true,
    "params": [
      {
        "name": "equality",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "defaultEquality",
        "defaultValue": "defaultEquality"
      }
    ],
    "return": {
      "types": [
        "{\"get\": *, \"set\": *}"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "distinctUntilChanged",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~distinctUntilChanged",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{distinctUntilChanged}",
    "description": "Takes an iterable and returns a new one with adjacent duplicate elements removed.\nThe order of the iterable is maintained.\nThis function is curried.",
    "lineNumber": 571,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object="
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "The equality system to use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "empty",
    "memberof": "esm/index.js",
    "static": true,
    "longname": "esm/index.js~empty",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{empty}",
    "description": "An empty iterable. ",
    "lineNumber": 804,
    "type": {
      "types": [
        "{\"undefined\": *}"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "filter",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~filter",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{filter}",
    "description": "Takes an iterable and returns a new one including only elements that satisfy a given predicate.  \nThe order of the iterable is maintained. \nThis function is curried. ",
    "lineNumber": 816,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The predicate."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "first",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~first",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{first}",
    "description": "Returns the first element of an iterable that satisfies a given predicate.   \nThis function will throw an error if no satisfactory element is found.  \nThis function is curried. ",
    "lineNumber": 861,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object="
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The predicate, defaults to always true."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "flatMap",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~flatMap",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{flatMap}",
    "description": "Takes an iterable and returns a new one where each element is transformed using the given function.  \nUnlike map, the function is expected to return an iterable for each element. These iterables are concatenated. \nThe order of the iterable is maintained. \nThis function is curried. ",
    "lineNumber": 907,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The transformation function that returns an iterable."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "forever",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~forever",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{forever}",
    "description": "Given an iterable returns a new iterable that repeats it forever. \nTake care, since the resulting iterable is infinite. ",
    "lineNumber": 947,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable to repeat."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "fromArray",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~fromArray",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{fromArray}",
    "description": "Given an array, returns an iterable with equivalent elements. \nYou should not mutate the array used to create the iterable. ",
    "lineNumber": 967,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "fromGenerator",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~fromGenerator",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{fromGenerator}",
    "description": "Given a generator function, returns an iterable with equivalent elements. ",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The generator function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "groupBy",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~groupBy",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{groupBy}",
    "description": "Returns an iterable of iterables split by the grouping function.\nIf the iterable is empty then an error is thrown.\nThis function is partially curried.",
    "lineNumber": 989,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "the grouping function."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultEquality",
        "defaultRaw": "defaultEquality",
        "name": "equality",
        "description": "The equality system to use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "head",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~head",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{head}",
    "description": "Returns the first element of an iterable. \nIf the iterable is empty then an error is thrown. ",
    "lineNumber": 1039,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "includes",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~includes",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{includes}",
    "description": "Tests if a an iterable contains a given element. \nAlso takes an equality object as an optional argument. \nThis function is partially curried. ",
    "lineNumber": 1077,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The element to look for."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultEquality",
        "defaultRaw": "defaultEquality",
        "name": "equality",
        "description": "The equality system to use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable to search."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "indexed",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~indexed",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{indexed}",
    "description": null,
    "lineNumber": 469,
    "undocument": true,
    "params": [
      {
        "name": "xs",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "intercalate",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~intercalate",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{intercalate}",
    "description": "Puts a given item between each element in a sequence.",
    "lineNumber": 1123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object="
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The seperator item."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable to intercalate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "isIterable",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~isIterable",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{isIterable}",
    "description": "Tests if a given object is an iterable ",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The object to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "join",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~join",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{join}",
    "description": "Joins all elements in an iterable using the given seperator. \nIf the iterable is empty then the empty string is returned. ",
    "lineNumber": 1398,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String="
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The seperator string."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable to join."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "just",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~just",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{just}",
    "description": "Constructs an iterable from a fixed list of elements. \nThis function is variadic. ",
    "lineNumber": 1444,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": false,
        "name": "elements",
        "description": "The elements of the iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "last",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~last",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{last}",
    "description": "Returns the last element of an iterable that satisfies a given predicate.   \nThis function will throw an error if no satisfactory element is found.  \nThis function is curried. ",
    "lineNumber": 1483,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object="
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The predicate, defaults to always true."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "map",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~map",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{map}",
    "description": "Takes an iterable and returns a new one where each element is transformed using the given function.  \nThe order of the iterable is maintained. \nThis function is curried. ",
    "lineNumber": 1529,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The transformation function."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "max",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~max",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{max}",
    "description": "Takes an iterable and returns the largest element, according to the given comparison. \nThis function is curried. ",
    "lineNumber": 1631,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object="
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "The comparison."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "min",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~min",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{min}",
    "description": "Takes an iterable and returns the smallest element, according to the given comparison. \nThis function is curried. ",
    "lineNumber": 1571,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object="
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "The comparison."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "none",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~none",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{none}",
    "description": "Tests if a function holds true for none of the elements in an iterable. \nAlways returns true for an empty iterable. \nBy default, this function returns false for an iterable with any elements. \nThis function is curried. ",
    "lineNumber": 1648,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function="
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The condition to test for each element."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "nth",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~nth",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{nth}",
    "description": "Returns the nth element of an iterable.    \nThis function will throw an error if the iterable is not long enough.  \nThis function is curried. ",
    "lineNumber": 1693,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The zero-based index of the element to return."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "once",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~once",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{once}",
    "description": "Takes an iterable and returns a new iterable that may only be iterated once. \nThis function is useful for debugging purposes. ",
    "lineNumber": 1743,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "prepend",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~prepend",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{prepend}",
    "description": "Prepends an object to the start of an iterable sequence. \nThis function is curried. ",
    "lineNumber": 1769,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The object to prepend."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "range",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~range",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{range}",
    "description": "Creates an iterable of numbers from zero to the given limit. ",
    "lineNumber": 412,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number="
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The number to count to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "reduce",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~reduce",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{reduce}",
    "description": "Performs a reduction of an iterable, starting from a given state and reducer function. \nNote that this function must not be called on an infinite iterable. \nThis function is partially curried. ",
    "lineNumber": 1785,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The initial state."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The reducer function."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "remove",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~remove",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{remove}",
    "description": "Takes an iterable and returns a new iterable where\nthe nth element has been skipped.  \nThis function is curried. ",
    "lineNumber": 1822,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The index of the element to replace."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "repeat",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~repeat",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{repeat}",
    "description": "Repeats an iterable for the given number of times. \nThis function is curried. ",
    "lineNumber": 1863,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The number of repetitions."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "reverse",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~reverse",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{reverse}",
    "description": "Given an iterable, returns a new iterable with the elements reversed. \nNote that this function must not be called on an infinite iterable. ",
    "lineNumber": 1887,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "set",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~set",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{set}",
    "description": "Takes an iterable and returns a new iterable where\nthe nth element has been set to a given value.  \nThis function is curried. ",
    "lineNumber": 1172,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The index of the element to replace."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The new value."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "single",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~single",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{single}",
    "description": "Returns the first element of an iterable that satisfies a given predicate.   \nThis function will throw an error if no satisfactory element is found.  \nThis function is curried. ",
    "lineNumber": 1903,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object="
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The predicate, defaults to always true."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "skip",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~skip",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{skip}",
    "description": "Skips the first n elements of an iterable. \nIf there are fewer than n elements in an iterable, then an empty iterable will be returned. \nThis function is curried. ",
    "lineNumber": 2004,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The number of elements to skip."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "skipUntil",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~skipUntil",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{skipUntil}",
    "description": "Skips elements from an iterable for as long as the elements satisfy a given condition. \nThe first element that satisfies the condition will be included. \nThis function is curried. ",
    "lineNumber": 1953,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "smoosh",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~smoosh",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{smoosh}",
    "description": "Deep flattens an iterable and all of its nested iterables. \nStrings are not considered iterables for this function. ",
    "lineNumber": 2057,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "sorted",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~sorted",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{sorted}",
    "description": "Given an iterable, returns a new iterable with the elements sorted. \nNote that this function must not be called on an infinite iterable. ",
    "lineNumber": 2126,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object="
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "The comparison function to use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "sortedBy",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~sortedBy",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{sortedBy}",
    "description": null,
    "lineNumber": 2140,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "defaultComparison",
        "defaultValue": "defaultComparison"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "sortedByDesc",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~sortedByDesc",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{sortedByDesc}",
    "description": null,
    "lineNumber": 2163,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "defaultComparison",
        "defaultValue": "defaultComparison"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "strictEquality",
    "memberof": "esm/index.js",
    "static": true,
    "longname": "esm/index.js~strictEquality",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{strictEquality}",
    "description": null,
    "lineNumber": 2186,
    "undocument": true,
    "type": {
      "types": [
        "{\"hashCode\": *, \"isEqual\": *}"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "stringifyEquality",
    "memberof": "esm/index.js",
    "static": true,
    "longname": "esm/index.js~stringifyEquality",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{stringifyEquality}",
    "description": null,
    "lineNumber": 634,
    "undocument": true,
    "type": {
      "types": [
        "{\"hashCode\": *, \"isEqual\": *}"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "structuralEquality",
    "memberof": "esm/index.js",
    "static": true,
    "longname": "esm/index.js~structuralEquality",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{structuralEquality}",
    "description": null,
    "lineNumber": 796,
    "undocument": true,
    "type": {
      "types": [
        "{\"hashCode\": *, \"isEqual\": *}"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "sum",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~sum",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{sum}",
    "description": "Sums all elements in an iterable. \nIf the iterable is empty then zero is returned. ",
    "lineNumber": 1214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "tail",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~tail",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{tail}",
    "description": "Returns an iterable of all elements except the first. \nIf the iterable is empty then an error is thrown. ",
    "lineNumber": 1253,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "take",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~take",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{take}",
    "description": "Takes the first n elements of an iterable. \nIf there are fewer than n elements in an iterable, then this has no effect. \nThis function is curried. ",
    "lineNumber": 1299,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The number of elements to take."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "takeWhile",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~takeWhile",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{takeWhile}",
    "description": "Takes elements from an iterable for as long as the elements satisfy a given condition. \nThe first element that does satisfies the condition will not be included. \nThis function is curried. ",
    "lineNumber": 1352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "toArray",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~toArray",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{toArray}",
    "description": "Takes an iterable and converts it into an array. \nThis should only be called on finite iterables. ",
    "lineNumber": 2085,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "unique",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~unique",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{unique}",
    "description": "Takes an iterable and returns a new one with duplicate elements removed.  \nThe order of the iterable is maintained. \nThis function is curried. ",
    "lineNumber": 2200,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object="
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "The equality system to use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "update",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~update",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{update}",
    "description": "Takes an iterable and returns a new iterable where\nthe nth element has been updated with the given function.  \nThis function is curried. ",
    "lineNumber": 2282,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The index of the element to replace."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The update function."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "zip",
    "memberof": "esm/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "esm/index.js~zip",
    "access": "public",
    "export": true,
    "importPath": "@njlr/seq",
    "importStyle": "{zip}",
    "description": "Combines two iterables into one by pairing elements. \nEach pair is a two element array. \nThe longer of the two iterables will be truncated to match the length of the shorter one.  \nThis function is curried. ",
    "lineNumber": 439,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ys",
        "description": "The iterable whose elements will be the second element of the pairs."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The iterable whose elements will be the first element of the pairs."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "kind": "index",
    "content": "# seq\n\nA simple library for manipulating generators and arrays in JavaScript. \n\n[![Travis](https://img.shields.io/travis/njlr/seq.svg)](https://travis-ci.org/njlr/seq) \n\n## Get Started\n\nInstall using [Yarn](https://yarnpkg.com/): \n\n```bash\nyarn add @njlr/seq\n```\n\nInstall using [NPM](https://www.npmjs.com/): \n\n\n```bash\nnpm install --save @njlr/seq\n```\n\nYou can [browse the documentation on GitHub](https://njlr.github.io/seq/).\n\n\n## Why? 🤔\n\n * Some of the built-in Array functions are mutating (e.g. `Array.prototype.sort`). \n * Many array functions are missing. Where is `Array.prototype.flatMap`?\n * A chain of array functions creates a new array at every stage: the operations are not lazy. \n * [lodash](https://lodash.com/) and [friends](https://github.com/jussi-kalliokoski/trine) require either a wrapper object or binding for chaining calls. We use the [pipeline operator](https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-pipeline-operator) (`|>`) to achieve this at compile-time! \n * This package is a good citizen. It has no dependencies and does not mutate any global objects. \n * The code is simple. You can review the whole thing in about an hour. \n\n## Demo\n\n```javascript\nimport * as seq from '@njlr/seq';\n\nconst xs = [ 1, 5, 1, 2, 7, 3, 3, 4, 5, 0 ] \n  |> seq.unique()\n  |> seq.map(x => x * 2)\n  |> seq.filter(x => x > 4)\n  |> seq.sorted()\n  |> seq.toArray;\n\n// xs is [ 6, 8, 10, 14 ]\n```\n\nSince seq works on iterables, you can also use `for...of` loops:\n\n```javascript\nimport * as seq from '@njlr/seq';\n\nfor (const x of seq.range(10) |> seq.map(x => x * x)) {\n  console.log(x);\n}\n```\n\nThis library also plays nicely with spread syntax! \n\n```javascript\nconst squares = [ ... seq.range(10) |> seq.map(x => x * x) ];\n```\n\n\n## Development\n\nDependencies are managed by Yarn: \n\n```bash\nyarn install --pure-lockfile\n```\n\nTo run all tests:\n\n```bash\nyarn test\n```\n\nTo build the library:\n\n```bash\nyarn build\n```\n\nTo build the documentation: \n\n```bash\nyarn docs\n```\n\nTo release a new version:\n\n```bash\nnpm publish --access public \n```\n",
    "longname": "/home/njlr/Documents/onwardlabs/seq/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@njlr/seq\",\n  \"version\": \"3.8.2\",\n  \"entry\": \"./src/index.js\",\n  \"main\": \"./lib/index.js\",\n  \"module\": \"./esm/index.js\",\n  \"repository\": \"git@github.com:njlr/seq.git\",\n  \"author\": \"njlr <njlr@users.noreply.github.com>\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"rollup -c && rollup -c rollup.esm.config.js\",\n    \"docs\": \"rollup -c rollup.esm.config.js && rm -rf docs && esdoc\",\n    \"test\": \"jest\",\n    \"prepare\": \"rollup -c\",\n    \"prepublishOnly\": \"yarn test && yarn build\"\n  },\n  \"jest\": {\n    \"testURL\": \"http://localhost\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.7.7\",\n    \"@babel/node\": \"^7.7.7\",\n    \"@babel/plugin-proposal-pipeline-operator\": \"^7.7.7\",\n    \"@babel/preset-env\": \"^7.7.7\",\n    \"core-js\": \"^3.4.1\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-importpath-plugin\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"jest\": \"^24.9.0\",\n    \"regenerator-runtime\": \"^0.11.1\",\n    \"rollup\": \"^1.27.1\",\n    \"rollup-plugin-babel\": \"^4.0.0-beta.0\"\n  }\n}\n",
    "longname": "/home/njlr/Documents/onwardlabs/seq/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]